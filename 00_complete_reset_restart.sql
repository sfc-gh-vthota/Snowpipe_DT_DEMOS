-- =============================================================================
-- COMPLETE DEMO RESET AND RESTART SCRIPT
-- =============================================================================
-- This script completely resets the demo and rebuilds everything from scratch
-- Use this when you need a clean slate for the Snowpipe -> Streams -> Tasks pipeline
-- =============================================================================

USE DATABASE SNOWPIPE_DT_DEMO;

SELECT '=== PHASE 1: COMPLETE CLEANUP ===' as PHASE;

-- STEP 1: Drop all tasks first (they depend on streams)
DROP TASK IF EXISTS PROCESS_CUSTOMERS_STREAM;
DROP TASK IF EXISTS PROCESS_PRODUCTS_STREAM;
DROP TASK IF EXISTS PROCESS_ORDERS_STREAM;
DROP TASK IF EXISTS PROCESS_ORDER_ITEMS_STREAM;
DROP TASK IF EXISTS PROCESS_SUPPLIERS_STREAM;
DROP TASK IF EXISTS PROCESS_INVENTORY_STREAM;
DROP TASK IF EXISTS PROCESS_WAREHOUSES_STREAM;
DROP TASK IF EXISTS PROCESS_EMPLOYEES_STREAM;
DROP TASK IF EXISTS PROCESS_TERRITORIES_STREAM;
DROP TASK IF EXISTS PROCESS_PROMOTIONS_STREAM;

SELECT 'All tasks dropped' as STATUS;

-- STEP 2: Drop all streams (they depend on stage tables)
USE SCHEMA STAGE_DATA;
DROP STREAM IF EXISTS STG_CUSTOMERS_STREAM;
DROP STREAM IF EXISTS STG_PRODUCTS_STREAM;
DROP STREAM IF EXISTS STG_ORDERS_STREAM;
DROP STREAM IF EXISTS STG_ORDER_ITEMS_STREAM;
DROP STREAM IF EXISTS STG_SUPPLIERS_STREAM;
DROP STREAM IF EXISTS STG_INVENTORY_STREAM;
DROP STREAM IF EXISTS STG_WAREHOUSES_STREAM;
DROP STREAM IF EXISTS STG_EMPLOYEES_STREAM;
DROP STREAM IF EXISTS STG_TERRITORIES_STREAM;
DROP STREAM IF EXISTS STG_PROMOTIONS_STREAM;

SELECT 'All streams dropped' as STATUS;

-- STEP 3: Drop all pipes (they load into stage tables)
DROP PIPE IF EXISTS PIPE_CUSTOMERS;
DROP PIPE IF EXISTS PIPE_PRODUCTS;
DROP PIPE IF EXISTS PIPE_ORDERS;
DROP PIPE IF EXISTS PIPE_ORDER_ITEMS;
DROP PIPE IF EXISTS PIPE_SUPPLIERS;
DROP PIPE IF EXISTS PIPE_INVENTORY;
DROP PIPE IF EXISTS PIPE_WAREHOUSES;
DROP PIPE IF EXISTS PIPE_EMPLOYEES;
DROP PIPE IF EXISTS PIPE_TERRITORIES;
DROP PIPE IF EXISTS PIPE_PROMOTIONS;

SELECT 'All pipes dropped' as STATUS;

-- STEP 4: Drop all stage tables  
DROP TABLE IF EXISTS STG_CUSTOMERS;
DROP TABLE IF EXISTS STG_PRODUCTS;
DROP TABLE IF EXISTS STG_ORDERS;
DROP TABLE IF EXISTS STG_ORDER_ITEMS;
DROP TABLE IF EXISTS STG_SUPPLIERS;
DROP TABLE IF EXISTS STG_INVENTORY;
DROP TABLE IF EXISTS STG_WAREHOUSES;
DROP TABLE IF EXISTS STG_EMPLOYEES;
DROP TABLE IF EXISTS STG_TERRITORIES;
DROP TABLE IF EXISTS STG_PROMOTIONS;

SELECT 'All stage tables dropped' as STATUS;

-- STEP 5: Drop all latest data tables
USE SCHEMA LATEST_DATA;
DROP TABLE IF EXISTS LATEST_CUSTOMERS;
DROP TABLE IF EXISTS LATEST_PRODUCTS;
DROP TABLE IF EXISTS LATEST_ORDERS;
DROP TABLE IF EXISTS LATEST_ORDER_ITEMS;
DROP TABLE IF EXISTS LATEST_SUPPLIERS;
DROP TABLE IF EXISTS LATEST_INVENTORY;
DROP TABLE IF EXISTS LATEST_WAREHOUSES;
DROP TABLE IF EXISTS LATEST_EMPLOYEES;
DROP TABLE IF EXISTS LATEST_TERRITORIES;
DROP TABLE IF EXISTS LATEST_PROMOTIONS;

SELECT 'All latest data tables dropped' as STATUS;

-- STEP 6: Clear all files from stages (optional - removes old files)
USE SCHEMA DEMO_STAGES;
REMOVE @STG_CUSTOMERS_FILES;
REMOVE @STG_PRODUCTS_FILES;
REMOVE @STG_ORDERS_FILES;
REMOVE @STG_ORDER_ITEMS_FILES;
REMOVE @STG_SUPPLIERS_FILES;
REMOVE @STG_INVENTORY_FILES;
REMOVE @STG_WAREHOUSES_FILES;
REMOVE @STG_EMPLOYEES_FILES;
REMOVE @STG_TERRITORIES_FILES;
REMOVE @STG_PROMOTIONS_FILES;

SELECT 'All staged files removed' as STATUS;

SELECT '=== PHASE 2: RECREATION - STAGE TABLES ===' as PHASE;

USE SCHEMA STAGE_DATA;

-- Recreate all stage tables for historical data
CREATE OR REPLACE TABLE STG_CUSTOMERS (
    CUSTOMER_ID NUMBER,
    CUSTOMER_NAME VARCHAR(100),
    EMAIL VARCHAR(100),
    PHONE VARCHAR(20),
    ADDRESS VARCHAR(200),
    CITY VARCHAR(50),
    STATE VARCHAR(50),
    ZIP_CODE VARCHAR(10),
    COUNTRY VARCHAR(50),
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE STG_PRODUCTS (
    PRODUCT_ID NUMBER,
    PRODUCT_NAME VARCHAR(100),
    CATEGORY VARCHAR(50),
    PRICE NUMBER(10,2),
    SUPPLIER_ID NUMBER,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE STG_ORDERS (
    ORDER_ID NUMBER,
    CUSTOMER_ID NUMBER,
    ORDER_DATE DATE,
    TOTAL_AMOUNT NUMBER(10,2),
    ORDER_STATUS VARCHAR(20),
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE STG_ORDER_ITEMS (
    ORDER_ITEM_ID NUMBER,
    ORDER_ID NUMBER,
    PRODUCT_ID NUMBER,
    QUANTITY NUMBER,
    UNIT_PRICE NUMBER(10,2),
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE STG_SUPPLIERS (
    SUPPLIER_ID NUMBER,
    SUPPLIER_NAME VARCHAR(100),
    CONTACT_EMAIL VARCHAR(100),
    CONTACT_PHONE VARCHAR(20),
    ADDRESS VARCHAR(200),
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE STG_INVENTORY (
    INVENTORY_ID NUMBER,
    PRODUCT_ID NUMBER,
    WAREHOUSE_ID NUMBER,
    QUANTITY_ON_HAND NUMBER,
    REORDER_LEVEL NUMBER,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE STG_WAREHOUSES (
    WAREHOUSE_ID NUMBER,
    WAREHOUSE_NAME VARCHAR(100),
    LOCATION VARCHAR(100),
    MANAGER_ID NUMBER,
    CAPACITY NUMBER,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE STG_EMPLOYEES (
    EMPLOYEE_ID NUMBER,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    EMAIL VARCHAR(100),
    PHONE VARCHAR(20),
    DEPARTMENT VARCHAR(50),
    SALARY NUMBER(10,2),
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE STG_TERRITORIES (
    TERRITORY_ID NUMBER,
    TERRITORY_NAME VARCHAR(100),
    REGION VARCHAR(50),
    MANAGER_ID NUMBER,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

CREATE OR REPLACE TABLE STG_PROMOTIONS (
    PROMOTION_ID NUMBER,
    PROMOTION_NAME VARCHAR(100),
    DISCOUNT_PERCENTAGE NUMBER(5,2),
    START_DATE DATE,
    END_DATE DATE,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
);

SELECT 'All stage tables recreated' as STATUS;

SELECT '=== PHASE 3: RECREATION - LATEST DATA TABLES ===' as PHASE;

USE SCHEMA LATEST_DATA;

-- Recreate all latest data tables (targets for MERGE operations)
CREATE OR REPLACE TABLE LATEST_CUSTOMERS (
    CUSTOMER_ID NUMBER PRIMARY KEY,
    CUSTOMER_NAME VARCHAR(100),
    EMAIL VARCHAR(100),
    PHONE VARCHAR(20),
    ADDRESS VARCHAR(200),
    CITY VARCHAR(50),
    STATE VARCHAR(50),
    ZIP_CODE VARCHAR(10),
    COUNTRY VARCHAR(50),
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ
);

CREATE OR REPLACE TABLE LATEST_PRODUCTS (
    PRODUCT_ID NUMBER PRIMARY KEY,
    PRODUCT_NAME VARCHAR(100),
    CATEGORY VARCHAR(50),
    PRICE NUMBER(10,2),
    SUPPLIER_ID NUMBER,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ
);

CREATE OR REPLACE TABLE LATEST_ORDERS (
    ORDER_ID NUMBER PRIMARY KEY,
    CUSTOMER_ID NUMBER,
    ORDER_DATE DATE,
    TOTAL_AMOUNT NUMBER(10,2),
    ORDER_STATUS VARCHAR(20),
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ
);

CREATE OR REPLACE TABLE LATEST_ORDER_ITEMS (
    ORDER_ITEM_ID NUMBER PRIMARY KEY,
    ORDER_ID NUMBER,
    PRODUCT_ID NUMBER,
    QUANTITY NUMBER,
    UNIT_PRICE NUMBER(10,2),
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ
);

CREATE OR REPLACE TABLE LATEST_SUPPLIERS (
    SUPPLIER_ID NUMBER PRIMARY KEY,
    SUPPLIER_NAME VARCHAR(100),
    CONTACT_EMAIL VARCHAR(100),
    CONTACT_PHONE VARCHAR(20),
    ADDRESS VARCHAR(200),
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ
);

CREATE OR REPLACE TABLE LATEST_INVENTORY (
    INVENTORY_ID NUMBER PRIMARY KEY,
    PRODUCT_ID NUMBER,
    WAREHOUSE_ID NUMBER,
    QUANTITY_ON_HAND NUMBER,
    REORDER_LEVEL NUMBER,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ
);

CREATE OR REPLACE TABLE LATEST_WAREHOUSES (
    WAREHOUSE_ID NUMBER PRIMARY KEY,
    WAREHOUSE_NAME VARCHAR(100),
    LOCATION VARCHAR(100),
    MANAGER_ID NUMBER,
    CAPACITY NUMBER,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ
);

CREATE OR REPLACE TABLE LATEST_EMPLOYEES (
    EMPLOYEE_ID NUMBER PRIMARY KEY,
    FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    EMAIL VARCHAR(100),
    PHONE VARCHAR(20),
    DEPARTMENT VARCHAR(50),
    SALARY NUMBER(10,2),
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ
);

CREATE OR REPLACE TABLE LATEST_TERRITORIES (
    TERRITORY_ID NUMBER PRIMARY KEY,
    TERRITORY_NAME VARCHAR(100),
    REGION VARCHAR(50),
    MANAGER_ID NUMBER,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ
);

CREATE OR REPLACE TABLE LATEST_PROMOTIONS (
    PROMOTION_ID NUMBER PRIMARY KEY,
    PROMOTION_NAME VARCHAR(100),
    DISCOUNT_PERCENTAGE NUMBER(5,2),
    START_DATE DATE,
    END_DATE DATE,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS VARCHAR(20),
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ
);

SELECT 'All latest data tables recreated' as STATUS;

SELECT '=== RESET COMPLETE - READY FOR FRESH START ===' as FINAL_STATUS;

SELECT 'NEXT STEPS:' as INSTRUCTIONS;
SELECT '1. Run 04_create_snowpipes.sql to recreate pipes' as STEP_1;
SELECT '2. Run 06_demo_file_upload.sql to upload JSON files' as STEP_2;  
SELECT '3. Wait for Snowpipe to load data into stage tables' as STEP_3;
SELECT '4. Run 05_create_streams_and_tasks.sql to create streams & tasks' as STEP_4;
SELECT '5. Run 05B_remaining_streams_tasks.sql to complete all streams & tasks' as STEP_5;
SELECT '6. Monitor with 07_demo_monitoring_validation.sql' as STEP_6;
