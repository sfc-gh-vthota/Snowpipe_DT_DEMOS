-- =============================================================================
-- CORRECTED MERGE OPERATIONS FOR ALL TASKS
-- =============================================================================
-- This script provides the corrected MERGE logic that should be used in all tasks
-- Key fixes:
-- 1. ROW_NUMBER() filtering moved to WHERE clause in subquery
-- 2. Added DATA_VERSION comparison in WHEN MATCHED condition
-- 3. Proper subquery structure to prevent duplicate processing
-- =============================================================================

-- Run this after creating tasks to replace them with corrected logic
USE SCHEMA SNOWPIPE_DT_DEMO.STAGE_DATA;

-- =============================================================================
-- DROP AND RECREATE ALL TASKS WITH CORRECTED MERGE LOGIC
-- =============================================================================

-- Drop existing tasks first
DROP TASK IF EXISTS PROCESS_CUSTOMERS_STREAM;
DROP TASK IF EXISTS PROCESS_PRODUCTS_STREAM;
DROP TASK IF EXISTS PROCESS_ORDERS_STREAM;
DROP TASK IF EXISTS PROCESS_ORDER_ITEMS_STREAM;
DROP TASK IF EXISTS PROCESS_SUPPLIERS_STREAM;
DROP TASK IF EXISTS PROCESS_INVENTORY_STREAM;
DROP TASK IF EXISTS PROCESS_WAREHOUSES_STREAM;
DROP TASK IF EXISTS PROCESS_EMPLOYEES_STREAM;
DROP TASK IF EXISTS PROCESS_TERRITORIES_STREAM;
DROP TASK IF EXISTS PROCESS_PROMOTIONS_STREAM;

SELECT 'All existing tasks dropped. Recreating with corrected MERGE logic...' as STATUS;

-- =============================================================================
-- 1. CUSTOMERS PROCESSING TASK (CORRECTED)
-- =============================================================================
CREATE OR REPLACE TASK PROCESS_CUSTOMERS_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_CUSTOMERS_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_CUSTOMERS AS target
USING (
    SELECT 
        CUSTOMER_ID, CUSTOMER_NAME, EMAIL, PHONE, ADDRESS, CITY, STATE, ZIP_CODE, COUNTRY,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP
    FROM (
        SELECT 
            CUSTOMER_ID, CUSTOMER_NAME, EMAIL, PHONE, ADDRESS, CITY, STATE, ZIP_CODE, COUNTRY,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
            ROW_NUMBER() OVER (
                PARTITION BY CUSTOMER_ID 
                ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
            ) as rn
        FROM STG_CUSTOMERS_STREAM
        WHERE METADATA$ACTION = 'INSERT'
    )
    WHERE rn = 1
) AS source
ON target.CUSTOMER_ID = source.CUSTOMER_ID
WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION THEN 
    UPDATE SET 
        CUSTOMER_NAME = source.CUSTOMER_NAME, EMAIL = source.EMAIL, PHONE = source.PHONE,
        ADDRESS = source.ADDRESS, CITY = source.CITY, STATE = source.STATE,
        ZIP_CODE = source.ZIP_CODE, COUNTRY = source.COUNTRY,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (CUSTOMER_ID, CUSTOMER_NAME, EMAIL, PHONE, ADDRESS, CITY, STATE, ZIP_CODE, COUNTRY,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT)
    VALUES (source.CUSTOMER_ID, source.CUSTOMER_NAME, source.EMAIL, source.PHONE,
            source.ADDRESS, source.CITY, source.STATE, source.ZIP_CODE, source.COUNTRY,
            source.RECORD_TIMESTAMP, source.DATA_VERSION, source.RECORD_STATUS,
            source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP());

-- =============================================================================
-- 2. PRODUCTS PROCESSING TASK (CORRECTED)
-- =============================================================================
CREATE OR REPLACE TASK PROCESS_PRODUCTS_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_PRODUCTS_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_PRODUCTS AS target
USING (
    SELECT 
        PRODUCT_ID, PRODUCT_NAME, CATEGORY, PRICE, SUPPLIER_ID,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP
    FROM (
        SELECT 
            PRODUCT_ID, PRODUCT_NAME, CATEGORY, PRICE, SUPPLIER_ID,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
            ROW_NUMBER() OVER (
                PARTITION BY PRODUCT_ID 
                ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
            ) as rn
        FROM STG_PRODUCTS_STREAM
        WHERE METADATA$ACTION = 'INSERT'
    )
    WHERE rn = 1
) AS source
ON target.PRODUCT_ID = source.PRODUCT_ID
WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION THEN 
    UPDATE SET 
        PRODUCT_NAME = source.PRODUCT_NAME, CATEGORY = source.CATEGORY, PRICE = source.PRICE,
        SUPPLIER_ID = source.SUPPLIER_ID, RECORD_TIMESTAMP = source.RECORD_TIMESTAMP,
        DATA_VERSION = source.DATA_VERSION, RECORD_STATUS = source.RECORD_STATUS,
        LOAD_TIMESTAMP = source.LOAD_TIMESTAMP, STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (PRODUCT_ID, PRODUCT_NAME, CATEGORY, PRICE, SUPPLIER_ID,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT)
    VALUES (source.PRODUCT_ID, source.PRODUCT_NAME, source.CATEGORY, source.PRICE,
            source.SUPPLIER_ID, source.RECORD_TIMESTAMP, source.DATA_VERSION,
            source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP());

-- =============================================================================
-- 3. ORDERS PROCESSING TASK (CORRECTED)
-- =============================================================================
CREATE OR REPLACE TASK PROCESS_ORDERS_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_ORDERS_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_ORDERS AS target
USING (
    SELECT 
        ORDER_ID, CUSTOMER_ID, ORDER_DATE, TOTAL_AMOUNT, ORDER_STATUS,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP
    FROM (
        SELECT 
            ORDER_ID, CUSTOMER_ID, ORDER_DATE, TOTAL_AMOUNT, ORDER_STATUS,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
            ROW_NUMBER() OVER (
                PARTITION BY ORDER_ID 
                ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
            ) as rn
        FROM STG_ORDERS_STREAM
        WHERE METADATA$ACTION = 'INSERT'
    )
    WHERE rn = 1
) AS source
ON target.ORDER_ID = source.ORDER_ID
WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION THEN 
    UPDATE SET 
        CUSTOMER_ID = source.CUSTOMER_ID, ORDER_DATE = source.ORDER_DATE,
        TOTAL_AMOUNT = source.TOTAL_AMOUNT, ORDER_STATUS = source.ORDER_STATUS,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (ORDER_ID, CUSTOMER_ID, ORDER_DATE, TOTAL_AMOUNT, ORDER_STATUS,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT)
    VALUES (source.ORDER_ID, source.CUSTOMER_ID, source.ORDER_DATE, source.TOTAL_AMOUNT,
            source.ORDER_STATUS, source.RECORD_TIMESTAMP, source.DATA_VERSION,
            source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP());

-- =============================================================================
-- 4. ORDER ITEMS PROCESSING TASK (CORRECTED)
-- =============================================================================
CREATE OR REPLACE TASK PROCESS_ORDER_ITEMS_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_ORDER_ITEMS_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_ORDER_ITEMS AS target
USING (
    SELECT 
        ORDER_ITEM_ID, ORDER_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP
    FROM (
        SELECT 
            ORDER_ITEM_ID, ORDER_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
            ROW_NUMBER() OVER (
                PARTITION BY ORDER_ITEM_ID 
                ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
            ) as rn
        FROM STG_ORDER_ITEMS_STREAM
        WHERE METADATA$ACTION = 'INSERT'
    )
    WHERE rn = 1
) AS source
ON target.ORDER_ITEM_ID = source.ORDER_ITEM_ID
WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION THEN 
    UPDATE SET 
        ORDER_ID = source.ORDER_ID, PRODUCT_ID = source.PRODUCT_ID,
        QUANTITY = source.QUANTITY, UNIT_PRICE = source.UNIT_PRICE,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (ORDER_ITEM_ID, ORDER_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT)
    VALUES (source.ORDER_ITEM_ID, source.ORDER_ID, source.PRODUCT_ID, source.QUANTITY,
            source.UNIT_PRICE, source.RECORD_TIMESTAMP, source.DATA_VERSION,
            source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP());

-- =============================================================================
-- 5. SUPPLIERS PROCESSING TASK (CORRECTED)
-- =============================================================================
CREATE OR REPLACE TASK PROCESS_SUPPLIERS_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_SUPPLIERS_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_SUPPLIERS AS target
USING (
    SELECT 
        SUPPLIER_ID, SUPPLIER_NAME, CONTACT_EMAIL, CONTACT_PHONE, ADDRESS,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP
    FROM (
        SELECT 
            SUPPLIER_ID, SUPPLIER_NAME, CONTACT_EMAIL, CONTACT_PHONE, ADDRESS,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
            ROW_NUMBER() OVER (
                PARTITION BY SUPPLIER_ID 
                ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
            ) as rn
        FROM STG_SUPPLIERS_STREAM
        WHERE METADATA$ACTION = 'INSERT'
    )
    WHERE rn = 1
) AS source
ON target.SUPPLIER_ID = source.SUPPLIER_ID
WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION THEN 
    UPDATE SET 
        SUPPLIER_NAME = source.SUPPLIER_NAME, CONTACT_EMAIL = source.CONTACT_EMAIL,
        CONTACT_PHONE = source.CONTACT_PHONE, ADDRESS = source.ADDRESS,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (SUPPLIER_ID, SUPPLIER_NAME, CONTACT_EMAIL, CONTACT_PHONE, ADDRESS,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT)
    VALUES (source.SUPPLIER_ID, source.SUPPLIER_NAME, source.CONTACT_EMAIL,
            source.CONTACT_PHONE, source.ADDRESS, source.RECORD_TIMESTAMP,
            source.DATA_VERSION, source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP());

-- =============================================================================
-- 6. INVENTORY PROCESSING TASK (CORRECTED)
-- =============================================================================
CREATE OR REPLACE TASK PROCESS_INVENTORY_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_INVENTORY_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_INVENTORY AS target
USING (
    SELECT 
        INVENTORY_ID, PRODUCT_ID, WAREHOUSE_ID, QUANTITY_ON_HAND, REORDER_LEVEL,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP
    FROM (
        SELECT 
            INVENTORY_ID, PRODUCT_ID, WAREHOUSE_ID, QUANTITY_ON_HAND, REORDER_LEVEL,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
            ROW_NUMBER() OVER (
                PARTITION BY INVENTORY_ID 
                ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
            ) as rn
        FROM STG_INVENTORY_STREAM
        WHERE METADATA$ACTION = 'INSERT'
    )
    WHERE rn = 1
) AS source
ON target.INVENTORY_ID = source.INVENTORY_ID
WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION THEN 
    UPDATE SET 
        PRODUCT_ID = source.PRODUCT_ID, WAREHOUSE_ID = source.WAREHOUSE_ID,
        QUANTITY_ON_HAND = source.QUANTITY_ON_HAND, REORDER_LEVEL = source.REORDER_LEVEL,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (INVENTORY_ID, PRODUCT_ID, WAREHOUSE_ID, QUANTITY_ON_HAND, REORDER_LEVEL,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT)
    VALUES (source.INVENTORY_ID, source.PRODUCT_ID, source.WAREHOUSE_ID, source.QUANTITY_ON_HAND,
            source.REORDER_LEVEL, source.RECORD_TIMESTAMP, source.DATA_VERSION,
            source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP());

-- =============================================================================
-- 7. WAREHOUSES PROCESSING TASK (CORRECTED)
-- =============================================================================
CREATE OR REPLACE TASK PROCESS_WAREHOUSES_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_WAREHOUSES_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_WAREHOUSES AS target
USING (
    SELECT 
        WAREHOUSE_ID, WAREHOUSE_NAME, LOCATION, CAPACITY, MANAGER_ID,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP
    FROM (
        SELECT 
            WAREHOUSE_ID, WAREHOUSE_NAME, LOCATION, CAPACITY, MANAGER_ID,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
            ROW_NUMBER() OVER (
                PARTITION BY WAREHOUSE_ID 
                ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
            ) as rn
        FROM STG_WAREHOUSES_STREAM
        WHERE METADATA$ACTION = 'INSERT'
    )
    WHERE rn = 1
) AS source
ON target.WAREHOUSE_ID = source.WAREHOUSE_ID
WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION THEN 
    UPDATE SET 
        WAREHOUSE_NAME = source.WAREHOUSE_NAME, LOCATION = source.LOCATION,
        CAPACITY = source.CAPACITY, MANAGER_ID = source.MANAGER_ID,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (WAREHOUSE_ID, WAREHOUSE_NAME, LOCATION, CAPACITY, MANAGER_ID,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT)
    VALUES (source.WAREHOUSE_ID, source.WAREHOUSE_NAME, source.LOCATION, source.CAPACITY,
            source.MANAGER_ID, source.RECORD_TIMESTAMP, source.DATA_VERSION,
            source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP());

-- =============================================================================
-- 8. EMPLOYEES PROCESSING TASK (CORRECTED)
-- =============================================================================
CREATE OR REPLACE TASK PROCESS_EMPLOYEES_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_EMPLOYEES_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_EMPLOYEES AS target
USING (
    SELECT 
        EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, DEPARTMENT, SALARY,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP
    FROM (
        SELECT 
            EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, DEPARTMENT, SALARY,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
            ROW_NUMBER() OVER (
                PARTITION BY EMPLOYEE_ID 
                ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
            ) as rn
        FROM STG_EMPLOYEES_STREAM
        WHERE METADATA$ACTION = 'INSERT'
    )
    WHERE rn = 1
) AS source
ON target.EMPLOYEE_ID = source.EMPLOYEE_ID
WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION THEN 
    UPDATE SET 
        FIRST_NAME = source.FIRST_NAME, LAST_NAME = source.LAST_NAME, EMAIL = source.EMAIL,
        PHONE = source.PHONE, DEPARTMENT = source.DEPARTMENT, SALARY = source.SALARY,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, DEPARTMENT, SALARY,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT)
    VALUES (source.EMPLOYEE_ID, source.FIRST_NAME, source.LAST_NAME, source.EMAIL, source.PHONE,
            source.DEPARTMENT, source.SALARY, source.RECORD_TIMESTAMP, source.DATA_VERSION,
            source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP());

-- =============================================================================
-- 9. TERRITORIES PROCESSING TASK (CORRECTED)
-- =============================================================================
CREATE OR REPLACE TASK PROCESS_TERRITORIES_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_TERRITORIES_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_TERRITORIES AS target
USING (
    SELECT 
        TERRITORY_ID, TERRITORY_NAME, REGION, MANAGER_ID,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP
    FROM (
        SELECT 
            TERRITORY_ID, TERRITORY_NAME, REGION, MANAGER_ID,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
            ROW_NUMBER() OVER (
                PARTITION BY TERRITORY_ID 
                ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
            ) as rn
        FROM STG_TERRITORIES_STREAM
        WHERE METADATA$ACTION = 'INSERT'
    )
    WHERE rn = 1
) AS source
ON target.TERRITORY_ID = source.TERRITORY_ID
WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION THEN 
    UPDATE SET 
        TERRITORY_NAME = source.TERRITORY_NAME, REGION = source.REGION, MANAGER_ID = source.MANAGER_ID,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (TERRITORY_ID, TERRITORY_NAME, REGION, MANAGER_ID,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT)
    VALUES (source.TERRITORY_ID, source.TERRITORY_NAME, source.REGION, source.MANAGER_ID,
            source.RECORD_TIMESTAMP, source.DATA_VERSION, source.RECORD_STATUS,
            source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP());

-- =============================================================================
-- 10. PROMOTIONS PROCESSING TASK (CORRECTED)
-- =============================================================================
CREATE OR REPLACE TASK PROCESS_PROMOTIONS_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_PROMOTIONS_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_PROMOTIONS AS target
USING (
    SELECT 
        PROMOTION_ID, PROMOTION_NAME, DISCOUNT_PERCENTAGE, START_DATE, END_DATE,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP
    FROM (
        SELECT 
            PROMOTION_ID, PROMOTION_NAME, DISCOUNT_PERCENTAGE, START_DATE, END_DATE,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
            ROW_NUMBER() OVER (
                PARTITION BY PROMOTION_ID 
                ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
            ) as rn
        FROM STG_PROMOTIONS_STREAM
        WHERE METADATA$ACTION = 'INSERT'
    )
    WHERE rn = 1
) AS source
ON target.PROMOTION_ID = source.PROMOTION_ID
WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION THEN 
    UPDATE SET 
        PROMOTION_NAME = source.PROMOTION_NAME, DISCOUNT_PERCENTAGE = source.DISCOUNT_PERCENTAGE,
        START_DATE = source.START_DATE, END_DATE = source.END_DATE,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (PROMOTION_ID, PROMOTION_NAME, DISCOUNT_PERCENTAGE, START_DATE, END_DATE,
            RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT)
    VALUES (source.PROMOTION_ID, source.PROMOTION_NAME, source.DISCOUNT_PERCENTAGE,
            source.START_DATE, source.END_DATE, source.RECORD_TIMESTAMP, source.DATA_VERSION,
            source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP());

-- =============================================================================
-- ENABLE ALL CORRECTED TASKS (ALL 10)
-- =============================================================================
ALTER TASK PROCESS_CUSTOMERS_STREAM RESUME;
ALTER TASK PROCESS_PRODUCTS_STREAM RESUME;
ALTER TASK PROCESS_ORDERS_STREAM RESUME;
ALTER TASK PROCESS_ORDER_ITEMS_STREAM RESUME;
ALTER TASK PROCESS_SUPPLIERS_STREAM RESUME;
ALTER TASK PROCESS_INVENTORY_STREAM RESUME;
ALTER TASK PROCESS_WAREHOUSES_STREAM RESUME;
ALTER TASK PROCESS_EMPLOYEES_STREAM RESUME;
ALTER TASK PROCESS_TERRITORIES_STREAM RESUME;
ALTER TASK PROCESS_PROMOTIONS_STREAM RESUME;

SELECT '✅ ALL 10 MERGE OPERATIONS CORRECTED!' as STATUS;
SELECT 'Fixed tasks: CUSTOMERS, PRODUCTS, ORDERS, ORDER_ITEMS, SUPPLIERS, INVENTORY, WAREHOUSES, EMPLOYEES, TERRITORIES, PROMOTIONS' as TASKS_FIXED;
SELECT 'Key fixes applied:' as FIXES;
SELECT '1. ROW_NUMBER() filtering moved to subquery WHERE clause' as FIX_1;
SELECT '2. Added DATA_VERSION comparison: WHEN MATCHED AND target.DATA_VERSION < source.DATA_VERSION' as FIX_2;
SELECT '3. Proper ON condition: only entity_ID (no rn = 1)' as FIX_3;
SELECT 'All tasks should now properly MERGE instead of appending everything!' as RESULT;
