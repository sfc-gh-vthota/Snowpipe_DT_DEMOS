-- =============================================================================
-- REMAINING STREAMS AND TASKS - SUPPLEMENTARY SCRIPT
-- =============================================================================
-- This script completes the streams and tasks setup for the remaining 7 tables:
-- - Inventory, Warehouses, Employees, Sales Territories, Promotions
-- - Order Items, Suppliers (complete implementation)
--
-- PREREQUISITES: 
-- 1. Run 05_create_streams_and_tasks.sql FIRST
-- 2. Ensure the following already exist:
--    - LATEST_CUSTOMERS, LATEST_PRODUCTS, LATEST_ORDERS tables
--    - STREAMS_TASKS_WH warehouse
--    - All streams from the main script
-- =============================================================================

-- Verify prerequisite tables exist
USE SCHEMA SNOWPIPE_DT_DEMO.LATEST_DATA;
SELECT 'Checking prerequisites...' as STATUS;

-- This query will fail if the main script hasn't been run
SELECT COUNT(*) as PREREQUISITE_TABLES_COUNT
FROM INFORMATION_SCHEMA.TABLES 
WHERE TABLE_SCHEMA = 'LATEST_DATA' 
  AND TABLE_NAME IN ('LATEST_CUSTOMERS', 'LATEST_PRODUCTS', 'LATEST_ORDERS');
-- Should return 3 if prerequisites are met

USE SCHEMA SNOWPIPE_DT_DEMO.LATEST_DATA;

-- =============================================================================
-- SECTION 1: CREATE REMAINING LATEST DATA TABLES
-- =============================================================================

-- 6. LATEST INVENTORY TABLE
CREATE OR REPLACE TABLE LATEST_INVENTORY (
    INVENTORY_ID NUMBER,
    PRODUCT_ID NUMBER,
    WAREHOUSE_ID NUMBER,
    QUANTITY_ON_HAND NUMBER,
    QUANTITY_RESERVED NUMBER,
    QUANTITY_AVAILABLE NUMBER,
    REORDER_LEVEL NUMBER,
    REORDER_QUANTITY NUMBER,
    LAST_UPDATED TIMESTAMP_NTZ,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS STRING,
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (INVENTORY_ID)
);

-- 7. LATEST WAREHOUSES TABLE
CREATE OR REPLACE TABLE LATEST_WAREHOUSES (
    WAREHOUSE_ID NUMBER,
    WAREHOUSE_NAME STRING,
    LOCATION STRING,
    CAPACITY NUMBER,
    CURRENT_UTILIZATION NUMBER,
    MANAGER_ID NUMBER,
    PHONE STRING,
    ADDRESS STRING,
    CITY STRING,
    STATE STRING,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS STRING,
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (WAREHOUSE_ID)
);

-- 8. LATEST EMPLOYEES TABLE
CREATE OR REPLACE TABLE LATEST_EMPLOYEES (
    EMPLOYEE_ID NUMBER,
    FIRST_NAME STRING,
    LAST_NAME STRING,
    EMAIL STRING,
    PHONE STRING,
    DEPARTMENT STRING,
    POSITION STRING,
    SALARY NUMBER(10,2),
    HIRE_DATE DATE,
    MANAGER_ID NUMBER,
    ADDRESS STRING,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS STRING,
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (EMPLOYEE_ID)
);

-- 9. LATEST SALES TERRITORIES TABLE
CREATE OR REPLACE TABLE LATEST_SALES_TERRITORIES (
    TERRITORY_ID NUMBER,
    TERRITORY_NAME STRING,
    REGION STRING,
    COUNTRY STRING,
    SALES_REP_ID NUMBER,
    QUOTA NUMBER(12,2),
    ACTUAL_SALES NUMBER(12,2),
    TERRITORY_STATUS STRING,
    START_DATE DATE,
    END_DATE DATE,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS STRING,
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (TERRITORY_ID)
);

-- 10. LATEST PROMOTIONS TABLE
CREATE OR REPLACE TABLE LATEST_PROMOTIONS (
    PROMOTION_ID NUMBER,
    PROMOTION_NAME STRING,
    PROMOTION_TYPE STRING,
    DISCOUNT_PERCENT NUMBER(5,2),
    DISCOUNT_AMOUNT NUMBER(10,2),
    START_DATE DATE,
    END_DATE DATE,
    APPLICABLE_PRODUCTS STRING,
    MIN_ORDER_AMOUNT NUMBER(10,2),
    MAX_USES NUMBER,
    CURRENT_USES NUMBER,
    RECORD_TIMESTAMP TIMESTAMP_NTZ,
    DATA_VERSION NUMBER,
    RECORD_STATUS STRING,
    LOAD_TIMESTAMP TIMESTAMP_NTZ,
    STREAM_PROCESSED_AT TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    PRIMARY KEY (PROMOTION_ID)
);

-- =============================================================================
-- SECTION 2: CREATE STREAMS FOR REMAINING TABLES  
-- =============================================================================

USE SCHEMA SNOWPIPE_DT_DEMO.STAGE_DATA;

-- 4. ORDER ITEMS STREAM
CREATE OR REPLACE STREAM STG_ORDER_ITEMS_STREAM 
ON TABLE SNOWPIPE_DT_DEMO.STAGE_DATA.STG_ORDER_ITEMS
APPEND_ONLY = FALSE  -- Capture all DML operations
SHOW_INITIAL_ROWS = TRUE;  -- Include existing rows when stream is created

-- 5. SUPPLIERS STREAM  
CREATE OR REPLACE STREAM STG_SUPPLIERS_STREAM 
ON TABLE SNOWPIPE_DT_DEMO.STAGE_DATA.STG_SUPPLIERS
APPEND_ONLY = FALSE
SHOW_INITIAL_ROWS = TRUE;

-- 6. INVENTORY STREAM
CREATE OR REPLACE STREAM STG_INVENTORY_STREAM 
ON TABLE SNOWPIPE_DT_DEMO.STAGE_DATA.STG_INVENTORY
APPEND_ONLY = FALSE
SHOW_INITIAL_ROWS = TRUE;

-- 7. WAREHOUSES STREAM  
CREATE OR REPLACE STREAM STG_WAREHOUSES_STREAM 
ON TABLE SNOWPIPE_DT_DEMO.STAGE_DATA.STG_WAREHOUSES
APPEND_ONLY = FALSE
SHOW_INITIAL_ROWS = TRUE;

-- 8. EMPLOYEES STREAM
CREATE OR REPLACE STREAM STG_EMPLOYEES_STREAM 
ON TABLE SNOWPIPE_DT_DEMO.STAGE_DATA.STG_EMPLOYEES
APPEND_ONLY = FALSE
SHOW_INITIAL_ROWS = TRUE;

-- 9. TERRITORIES STREAM  
CREATE OR REPLACE STREAM STG_TERRITORIES_STREAM 
ON TABLE SNOWPIPE_DT_DEMO.STAGE_DATA.STG_TERRITORIES
APPEND_ONLY = FALSE
SHOW_INITIAL_ROWS = TRUE;

-- 10. PROMOTIONS STREAM
CREATE OR REPLACE STREAM STG_PROMOTIONS_STREAM 
ON TABLE SNOWPIPE_DT_DEMO.STAGE_DATA.STG_PROMOTIONS
APPEND_ONLY = FALSE
SHOW_INITIAL_ROWS = TRUE;

SELECT 'All remaining streams created successfully!' as STATUS;

-- =============================================================================
-- SECTION 3: CREATE REMAINING TASKS TO PROCESS STREAMS
-- =============================================================================

-- Set schema context for task creation (tasks will reference streams from STAGE_DATA)
USE SCHEMA SNOWPIPE_DT_DEMO.STAGE_DATA;

-- 4. ORDER ITEMS PROCESSING TASK (Complete implementation)
CREATE OR REPLACE TASK PROCESS_ORDER_ITEMS_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_ORDER_ITEMS_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_ORDER_ITEMS AS target
USING (
    SELECT 
        ORDER_ITEM_ID,
        ORDER_ID,
        PRODUCT_ID,
        QUANTITY,
        UNIT_PRICE,
        DISCOUNT_PERCENT,
        LINE_TOTAL,
        RECORD_TIMESTAMP,
        DATA_VERSION,
        RECORD_STATUS,
        LOAD_TIMESTAMP,
        ROW_NUMBER() OVER (
            PARTITION BY ORDER_ITEM_ID 
            ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
        ) as rn
    FROM STG_ORDER_ITEMS_STREAM
    WHERE METADATA$ACTION = 'INSERT'
) AS source
ON target.ORDER_ITEM_ID = source.ORDER_ITEM_ID AND source.rn = 1
WHEN MATCHED THEN 
    UPDATE SET 
        ORDER_ID = source.ORDER_ID,
        PRODUCT_ID = source.PRODUCT_ID,
        QUANTITY = source.QUANTITY,
        UNIT_PRICE = source.UNIT_PRICE,
        DISCOUNT_PERCENT = source.DISCOUNT_PERCENT,
        LINE_TOTAL = source.LINE_TOTAL,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP,
        DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS,
        LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (
        ORDER_ITEM_ID, ORDER_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE, DISCOUNT_PERCENT,
        LINE_TOTAL, RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT
    ) VALUES (
        source.ORDER_ITEM_ID, source.ORDER_ID, source.PRODUCT_ID, source.QUANTITY,
        source.UNIT_PRICE, source.DISCOUNT_PERCENT, source.LINE_TOTAL,
        source.RECORD_TIMESTAMP, source.DATA_VERSION, source.RECORD_STATUS,
        source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP()
    );

-- 5. SUPPLIERS PROCESSING TASK (Complete implementation)
CREATE OR REPLACE TASK PROCESS_SUPPLIERS_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_SUPPLIERS_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_SUPPLIERS AS target
USING (
    SELECT 
        SUPPLIER_ID,
        SUPPLIER_NAME,
        CONTACT_PERSON,
        EMAIL,
        PHONE,
        ADDRESS,
        CITY,
        STATE,
        COUNTRY,
        RATING,
        RECORD_TIMESTAMP,
        DATA_VERSION,
        RECORD_STATUS,
        LOAD_TIMESTAMP,
        ROW_NUMBER() OVER (
            PARTITION BY SUPPLIER_ID 
            ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
        ) as rn
    FROM STG_SUPPLIERS_STREAM
    WHERE METADATA$ACTION = 'INSERT'
) AS source
ON target.SUPPLIER_ID = source.SUPPLIER_ID AND source.rn = 1
WHEN MATCHED THEN 
    UPDATE SET 
        SUPPLIER_NAME = source.SUPPLIER_NAME,
        CONTACT_PERSON = source.CONTACT_PERSON,
        EMAIL = source.EMAIL,
        PHONE = source.PHONE,
        ADDRESS = source.ADDRESS,
        CITY = source.CITY,
        STATE = source.STATE,
        COUNTRY = source.COUNTRY,
        RATING = source.RATING,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP,
        DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS,
        LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (
        SUPPLIER_ID, SUPPLIER_NAME, CONTACT_PERSON, EMAIL, PHONE, ADDRESS,
        CITY, STATE, COUNTRY, RATING, RECORD_TIMESTAMP, DATA_VERSION,
        RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT
    ) VALUES (
        source.SUPPLIER_ID, source.SUPPLIER_NAME, source.CONTACT_PERSON, source.EMAIL,
        source.PHONE, source.ADDRESS, source.CITY, source.STATE, source.COUNTRY,
        source.RATING, source.RECORD_TIMESTAMP, source.DATA_VERSION,
        source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP()
    );

-- 6. INVENTORY PROCESSING TASK
CREATE OR REPLACE TASK PROCESS_INVENTORY_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_INVENTORY_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_INVENTORY AS target
USING (
    SELECT 
        INVENTORY_ID, PRODUCT_ID, WAREHOUSE_ID, QUANTITY_ON_HAND, QUANTITY_RESERVED,
        QUANTITY_AVAILABLE, REORDER_LEVEL, REORDER_QUANTITY, LAST_UPDATED,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
        ROW_NUMBER() OVER (
            PARTITION BY INVENTORY_ID 
            ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
        ) as rn
    FROM STG_INVENTORY_STREAM
    WHERE METADATA$ACTION = 'INSERT'
) AS source
ON target.INVENTORY_ID = source.INVENTORY_ID AND source.rn = 1
WHEN MATCHED THEN 
    UPDATE SET 
        PRODUCT_ID = source.PRODUCT_ID, WAREHOUSE_ID = source.WAREHOUSE_ID,
        QUANTITY_ON_HAND = source.QUANTITY_ON_HAND, QUANTITY_RESERVED = source.QUANTITY_RESERVED,
        QUANTITY_AVAILABLE = source.QUANTITY_AVAILABLE, REORDER_LEVEL = source.REORDER_LEVEL,
        REORDER_QUANTITY = source.REORDER_QUANTITY, LAST_UPDATED = source.LAST_UPDATED,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (
        INVENTORY_ID, PRODUCT_ID, WAREHOUSE_ID, QUANTITY_ON_HAND, QUANTITY_RESERVED,
        QUANTITY_AVAILABLE, REORDER_LEVEL, REORDER_QUANTITY, LAST_UPDATED,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT
    ) VALUES (
        source.INVENTORY_ID, source.PRODUCT_ID, source.WAREHOUSE_ID, source.QUANTITY_ON_HAND,
        source.QUANTITY_RESERVED, source.QUANTITY_AVAILABLE, source.REORDER_LEVEL,
        source.REORDER_QUANTITY, source.LAST_UPDATED, source.RECORD_TIMESTAMP,
        source.DATA_VERSION, source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP()
    );

-- 7. WAREHOUSES PROCESSING TASK
CREATE OR REPLACE TASK PROCESS_WAREHOUSES_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_WAREHOUSES_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_WAREHOUSES AS target
USING (
    SELECT 
        WAREHOUSE_ID, WAREHOUSE_NAME, LOCATION, CAPACITY, CURRENT_UTILIZATION,
        MANAGER_ID, PHONE, ADDRESS, CITY, STATE, RECORD_TIMESTAMP, DATA_VERSION,
        RECORD_STATUS, LOAD_TIMESTAMP,
        ROW_NUMBER() OVER (
            PARTITION BY WAREHOUSE_ID 
            ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
        ) as rn
    FROM STG_WAREHOUSES_STREAM
    WHERE METADATA$ACTION = 'INSERT'
) AS source
ON target.WAREHOUSE_ID = source.WAREHOUSE_ID AND source.rn = 1
WHEN MATCHED THEN 
    UPDATE SET 
        WAREHOUSE_NAME = source.WAREHOUSE_NAME, LOCATION = source.LOCATION,
        CAPACITY = source.CAPACITY, CURRENT_UTILIZATION = source.CURRENT_UTILIZATION,
        MANAGER_ID = source.MANAGER_ID, PHONE = source.PHONE, ADDRESS = source.ADDRESS,
        CITY = source.CITY, STATE = source.STATE, RECORD_TIMESTAMP = source.RECORD_TIMESTAMP,
        DATA_VERSION = source.DATA_VERSION, RECORD_STATUS = source.RECORD_STATUS,
        LOAD_TIMESTAMP = source.LOAD_TIMESTAMP, STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (
        WAREHOUSE_ID, WAREHOUSE_NAME, LOCATION, CAPACITY, CURRENT_UTILIZATION, MANAGER_ID,
        PHONE, ADDRESS, CITY, STATE, RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS,
        LOAD_TIMESTAMP, STREAM_PROCESSED_AT
    ) VALUES (
        source.WAREHOUSE_ID, source.WAREHOUSE_NAME, source.LOCATION, source.CAPACITY,
        source.CURRENT_UTILIZATION, source.MANAGER_ID, source.PHONE, source.ADDRESS,
        source.CITY, source.STATE, source.RECORD_TIMESTAMP, source.DATA_VERSION,
        source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP()
    );

-- 8. EMPLOYEES PROCESSING TASK
CREATE OR REPLACE TASK PROCESS_EMPLOYEES_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_EMPLOYEES_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_EMPLOYEES AS target
USING (
    SELECT 
        EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, DEPARTMENT, POSITION,
        SALARY, HIRE_DATE, MANAGER_ID, ADDRESS, RECORD_TIMESTAMP, DATA_VERSION,
        RECORD_STATUS, LOAD_TIMESTAMP,
        ROW_NUMBER() OVER (
            PARTITION BY EMPLOYEE_ID 
            ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
        ) as rn
    FROM STG_EMPLOYEES_STREAM
    WHERE METADATA$ACTION = 'INSERT'
) AS source
ON target.EMPLOYEE_ID = source.EMPLOYEE_ID AND source.rn = 1
WHEN MATCHED THEN 
    UPDATE SET 
        FIRST_NAME = source.FIRST_NAME, LAST_NAME = source.LAST_NAME, EMAIL = source.EMAIL,
        PHONE = source.PHONE, DEPARTMENT = source.DEPARTMENT, POSITION = source.POSITION,
        SALARY = source.SALARY, HIRE_DATE = source.HIRE_DATE, MANAGER_ID = source.MANAGER_ID,
        ADDRESS = source.ADDRESS, RECORD_TIMESTAMP = source.RECORD_TIMESTAMP,
        DATA_VERSION = source.DATA_VERSION, RECORD_STATUS = source.RECORD_STATUS,
        LOAD_TIMESTAMP = source.LOAD_TIMESTAMP, STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (
        EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE, DEPARTMENT, POSITION,
        SALARY, HIRE_DATE, MANAGER_ID, ADDRESS, RECORD_TIMESTAMP, DATA_VERSION,
        RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT
    ) VALUES (
        source.EMPLOYEE_ID, source.FIRST_NAME, source.LAST_NAME, source.EMAIL, source.PHONE,
        source.DEPARTMENT, source.POSITION, source.SALARY, source.HIRE_DATE, source.MANAGER_ID,
        source.ADDRESS, source.RECORD_TIMESTAMP, source.DATA_VERSION, source.RECORD_STATUS,
        source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP()
    );

-- 9. SALES TERRITORIES PROCESSING TASK
CREATE OR REPLACE TASK PROCESS_TERRITORIES_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_TERRITORIES_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_TERRITORIES AS target
USING (
    SELECT 
        TERRITORY_ID, TERRITORY_NAME, REGION, MANAGER_ID,
        RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
        ROW_NUMBER() OVER (
            PARTITION BY TERRITORY_ID 
            ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
        ) as rn
    FROM STG_TERRITORIES_STREAM
    WHERE METADATA$ACTION = 'INSERT'
) AS source
ON target.TERRITORY_ID = source.TERRITORY_ID AND source.rn = 1
WHEN MATCHED THEN 
    UPDATE SET 
        TERRITORY_NAME = source.TERRITORY_NAME, 
        REGION = source.REGION, 
        MANAGER_ID = source.MANAGER_ID,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP,
        DATA_VERSION = source.DATA_VERSION, 
        RECORD_STATUS = source.RECORD_STATUS,
        LOAD_TIMESTAMP = source.LOAD_TIMESTAMP, 
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (
        TERRITORY_ID, TERRITORY_NAME, REGION, MANAGER_ID, RECORD_TIMESTAMP, 
        DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT
    ) VALUES (
        source.TERRITORY_ID, source.TERRITORY_NAME, source.REGION, source.MANAGER_ID,
        source.RECORD_TIMESTAMP, source.DATA_VERSION, source.RECORD_STATUS, 
        source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP()
    );

-- 10. PROMOTIONS PROCESSING TASK
CREATE OR REPLACE TASK PROCESS_PROMOTIONS_STREAM
WAREHOUSE = STREAMS_TASKS_WH
SCHEDULE = '1 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_PROMOTIONS_STREAM')
AS
MERGE INTO SNOWPIPE_DT_DEMO.LATEST_DATA.LATEST_PROMOTIONS AS target
USING (
    SELECT 
        PROMOTION_ID, PROMOTION_NAME, PROMOTION_TYPE, DISCOUNT_PERCENT, DISCOUNT_AMOUNT,
        START_DATE, END_DATE, APPLICABLE_PRODUCTS, MIN_ORDER_AMOUNT, MAX_USES,
        CURRENT_USES, RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP,
        ROW_NUMBER() OVER (
            PARTITION BY PROMOTION_ID 
            ORDER BY DATA_VERSION DESC, RECORD_TIMESTAMP DESC, LOAD_TIMESTAMP DESC
        ) as rn
    FROM STG_PROMOTIONS_STREAM
    WHERE METADATA$ACTION = 'INSERT'
) AS source
ON target.PROMOTION_ID = source.PROMOTION_ID AND source.rn = 1
WHEN MATCHED THEN 
    UPDATE SET 
        PROMOTION_NAME = source.PROMOTION_NAME, PROMOTION_TYPE = source.PROMOTION_TYPE,
        DISCOUNT_PERCENT = source.DISCOUNT_PERCENT, DISCOUNT_AMOUNT = source.DISCOUNT_AMOUNT,
        START_DATE = source.START_DATE, END_DATE = source.END_DATE,
        APPLICABLE_PRODUCTS = source.APPLICABLE_PRODUCTS, MIN_ORDER_AMOUNT = source.MIN_ORDER_AMOUNT,
        MAX_USES = source.MAX_USES, CURRENT_USES = source.CURRENT_USES,
        RECORD_TIMESTAMP = source.RECORD_TIMESTAMP, DATA_VERSION = source.DATA_VERSION,
        RECORD_STATUS = source.RECORD_STATUS, LOAD_TIMESTAMP = source.LOAD_TIMESTAMP,
        STREAM_PROCESSED_AT = CURRENT_TIMESTAMP()
WHEN NOT MATCHED THEN
    INSERT (
        PROMOTION_ID, PROMOTION_NAME, PROMOTION_TYPE, DISCOUNT_PERCENT, DISCOUNT_AMOUNT,
        START_DATE, END_DATE, APPLICABLE_PRODUCTS, MIN_ORDER_AMOUNT, MAX_USES,
        CURRENT_USES, RECORD_TIMESTAMP, DATA_VERSION, RECORD_STATUS, LOAD_TIMESTAMP, STREAM_PROCESSED_AT
    ) VALUES (
        source.PROMOTION_ID, source.PROMOTION_NAME, source.PROMOTION_TYPE, source.DISCOUNT_PERCENT,
        source.DISCOUNT_AMOUNT, source.START_DATE, source.END_DATE, source.APPLICABLE_PRODUCTS,
        source.MIN_ORDER_AMOUNT, source.MAX_USES, source.CURRENT_USES, source.RECORD_TIMESTAMP,
        source.DATA_VERSION, source.RECORD_STATUS, source.LOAD_TIMESTAMP, CURRENT_TIMESTAMP()
    );

-- =============================================================================
-- SECTION 3: ENABLE ALL REMAINING TASKS
-- =============================================================================

ALTER TASK PROCESS_ORDER_ITEMS_STREAM RESUME;
ALTER TASK PROCESS_SUPPLIERS_STREAM RESUME;
ALTER TASK PROCESS_INVENTORY_STREAM RESUME;
ALTER TASK PROCESS_WAREHOUSES_STREAM RESUME;
ALTER TASK PROCESS_EMPLOYEES_STREAM RESUME;
ALTER TASK PROCESS_TERRITORIES_STREAM RESUME;
ALTER TASK PROCESS_PROMOTIONS_STREAM RESUME;

-- =============================================================================
-- SECTION 4: COMPREHENSIVE MONITORING
-- =============================================================================

-- First verify all latest data tables exist
USE SCHEMA SNOWPIPE_DT_DEMO.LATEST_DATA;
SHOW TABLES;

-- Check all stream status
SELECT 
    STREAM_NAME,
    CASE WHEN HAS_DATA THEN '✅ Has Data' ELSE '❌ No Data' END as STATUS
FROM (
    SELECT 'STG_CUSTOMERS_STREAM' as STREAM_NAME, SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_CUSTOMERS_STREAM') as HAS_DATA
    UNION ALL SELECT 'STG_PRODUCTS_STREAM', SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_PRODUCTS_STREAM')
    UNION ALL SELECT 'STG_ORDERS_STREAM', SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_ORDERS_STREAM')
    UNION ALL SELECT 'STG_ORDER_ITEMS_STREAM', SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_ORDER_ITEMS_STREAM')
    UNION ALL SELECT 'STG_SUPPLIERS_STREAM', SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_SUPPLIERS_STREAM')
    UNION ALL SELECT 'STG_INVENTORY_STREAM', SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_INVENTORY_STREAM')
    UNION ALL SELECT 'STG_WAREHOUSES_STREAM', SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_WAREHOUSES_STREAM')
    UNION ALL SELECT 'STG_EMPLOYEES_STREAM', SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_EMPLOYEES_STREAM')
    UNION ALL SELECT 'STG_SALES_TERRITORIES_STREAM', SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_SALES_TERRITORIES_STREAM')
    UNION ALL SELECT 'STG_PROMOTIONS_STREAM', SYSTEM$STREAM_HAS_DATA('SNOWPIPE_DT_DEMO.STAGE_DATA.STG_PROMOTIONS_STREAM')
);

-- Summary of all latest data tables
USE SCHEMA SNOWPIPE_DT_DEMO.LATEST_DATA;
SELECT 
    'CUSTOMERS' as TABLE_NAME, COUNT(*) as RECORDS, MAX(STREAM_PROCESSED_AT) as LAST_PROCESSED
    FROM LATEST_CUSTOMERS
UNION ALL SELECT 'PRODUCTS', COUNT(*), MAX(STREAM_PROCESSED_AT) FROM LATEST_PRODUCTS
UNION ALL SELECT 'ORDERS', COUNT(*), MAX(STREAM_PROCESSED_AT) FROM LATEST_ORDERS
UNION ALL SELECT 'ORDER_ITEMS', COUNT(*), MAX(STREAM_PROCESSED_AT) FROM LATEST_ORDER_ITEMS
UNION ALL SELECT 'SUPPLIERS', COUNT(*), MAX(STREAM_PROCESSED_AT) FROM LATEST_SUPPLIERS
UNION ALL SELECT 'INVENTORY', COUNT(*), MAX(STREAM_PROCESSED_AT) FROM LATEST_INVENTORY
UNION ALL SELECT 'WAREHOUSES', COUNT(*), MAX(STREAM_PROCESSED_AT) FROM LATEST_WAREHOUSES
UNION ALL SELECT 'EMPLOYEES', COUNT(*), MAX(STREAM_PROCESSED_AT) FROM LATEST_EMPLOYEES
UNION ALL SELECT 'TERRITORIES', COUNT(*), MAX(STREAM_PROCESSED_AT) FROM LATEST_SALES_TERRITORIES
UNION ALL SELECT 'PROMOTIONS', COUNT(*), MAX(STREAM_PROCESSED_AT) FROM LATEST_PROMOTIONS;

-- Recent task execution history
SELECT 
    NAME as TASK_NAME,
    STATE,
    SCHEDULED_TIME,
    COMPLETED_TIME,
    DATEDIFF('seconds', SCHEDULED_TIME, COMPLETED_TIME) as RUNTIME_SECONDS,
    RETURN_VALUE
FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY())
WHERE NAME LIKE 'PROCESS_%_STREAM'
ORDER BY SCHEDULED_TIME DESC
LIMIT 50;
